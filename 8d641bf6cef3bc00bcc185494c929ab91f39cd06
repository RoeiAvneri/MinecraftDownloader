k='url'
j='des'
U='java'
T='mods'
V=None
R=Exception
O='wb'
N=len
K=''
J=open
C=True
A=print
import xml.etree.ElementTree as g,gdown,time,sys,os as B,subprocess as H,re,requests as Q
h='https://raw.githubusercontent.com/RoeiAvneri/MinecraftDownloader/refs/heads/main/manifest.xml'
S=B.environ.get('TEMP','.')
E=B.path.join(S,'manifest.xml')
F=B.path.join(B.environ.get('APPDATA','.'),'.minecraft')
M=B.path.join(F,T)
I=K
B.makedirs(M,exist_ok=C)
def i():
	try:
		A=H.run([U,'-version'],capture_output=C,text=C,timeout=10);D=A.stderr+A.stdout;B=re.search('version "(\\d+)',D)
		if B:return int(B.group(1))
	except:pass
def y(forge_version):
	Y='forge-';E=forge_version;global I
	if not E:A('ERROR: No Forge version specified.');return
	Z=E.replace('-','-forge-',1);a=B.path.join(F,'versions',Z)
	if B.path.exists(a):A(f"Forge            : {E}");return
	M=i()
	if M is V or M<17:A('ERROR: Java 17+ is required.');sys.exit(1)
	A(f"Java             : Version {M}");A(f"Forge            : Installing {E}...");N=E.replace(Y,K)if Y in E else E;b=f"https://maven.minecraftforge.net/net/minecraftforge/forge/{N}/forge-{N}-installer.jar";D=B.path.join(S,f"{N}-installer.jar")
	try:
		G=Q.get(b,stream=C,timeout=60);G.raise_for_status()
		with J(D,O)as P:
			for L in G.iter_content(chunk_size=8192):
				if L:P.write(L)
		if B.path.getsize(D)<500000:raise R('Downloaded file too small')
	except:
		W='1.20.1-47.4.10';G=Q.get(f"https://maven.minecraftforge.net/net/minecraftforge/forge/{W}/forge-{W}-installer.jar",stream=C,timeout=60);G.raise_for_status()
		with J(D,O)as P:
			for L in G.iter_content(chunk_size=8192):P.write(L)
	try:
		X=H.run([U,'-jar',D,'--installClient'],cwd=F,capture_output=C,text=C,timeout=300)
		if X.returncode!=0:A(f"ERROR: Forge installer failed (code {X.returncode})");A(f'Run manually: java -jar "{D}" --installClient');I=D;return
		A(f"Forge            : {E} installed successfully")
	except H.TimeoutExpired:A(f'ERROR: Installer timed out. Run manually: java -jar "{D}" --installClient');return
	except R as c:A(f"ERROR: Failed to run installer: {c}");A(f'Run manually: java -jar "{D}" --installClient');return
	I=D;B.makedirs(B.path.join(F,T),exist_ok=C)
def z(manifest_mods):
	F=set()
	for G in manifest_mods:
		C=G.attrib.get(j)or G.attrib.get(k)
		if C:F.add(B.path.basename(C))
	E=0
	if B.path.exists(M):
		for D in B.listdir(M):
			C=B.path.join(M,D)
			if B.path.isfile(C)and D.endswith('.jar'):
				if D not in F:
					try:B.remove(C);E+=1
					except R as H:A(f"ERROR: Could not remove {D}: {H}")
	if E>0:A(f"Cleanup          : Removed {E} outdated mod(s)")
def A0(forge_version):
	C=forge_version;E=B.path.join(F,'launcher_profiles.json')
	if not B.path.exists(E):A('\nMinecraft launcher not found. Please launch manually.');return
	D=B.path.join(B.environ.get('PROGRAMFILES(X86)','C:\\Program Files (x86)'),'Minecraft Launcher','MinecraftLauncher.exe')
	if B.path.exists(D):H.Popen([D]);A(f"\nLaunching Minecraft... Select '{C}' profile")
	else:A(f"\nPlease launch Minecraft and select '{C}' profile")
def D():
	x='Content-Type';w='text/html'
	if not B.path.exists(E):
		import requests as S
		try:
			l=S.get(h,timeout=30);l.raise_for_status()
			with J(E,O)as F:F.write(l.content)
		except S.exceptions.RequestException as P:A(f"\nERROR: Failed to download manifest from GitHub");A(f"       {P}");A(f"       URL: {h}");return
	try:A1=g.parse(E)
	except g.ParseError as P:
		A(f"\nERROR: Failed to parse manifest XML");A(f"       {P}");A(f"       The manifest file may be corrupted.");A(f"       Location: {E}")
		with J(E,'r',encoding='utf-8')as F:
			m=F.readlines();W=32;A2=max(0,W-3);A3=min(N(m),W+2);A('\n       Problematic area:')
			for G in range(A2,A3):A4=' >>> 'if G==W-1 else'     ';A(f"{A4}Line {G+1}: {m[G].rstrip()}")
		A('\n       Deleting corrupted file. Please run the script again.');B.remove(E);return
	X=A1.getroot();Y=X.find('connection')
	if Y is V:
		A('\nERROR: Could not find <connection> tag in manifest.xml');A('       Available elements:')
		for A5 in X:A(f"       - {A5.tag}")
		return
	Z=Y.attrib.get('forge')
	if not Z:A("\nERROR: No 'forge' attribute in <connection> tag");A(f"       Available attributes: {list(Y.attrib.keys())}");return
	n=i()
	if n:A(f"Java             : Version {n}")
	y(Z);o=X.find('repository')
	if o is V:A('\nERROR: Could not find <repository> tag in manifest.xml');return
	L=o.findall('mod');A(f"Mods             : Processing {N(L)} mod(s)");A();z(L);a=0;p=0;b=0
	for(G,c)in enumerate(L,1):
		T=c.attrib.get('id');q=c.attrib.get(j)or c.attrib.get(k)
		if not q:A(f"[{G:02d}/{N(L)}] ERROR: No file path for mod {T}");b+=1;continue
		d=B.path.basename(q);D=B.path.join(M,d)
		if B.path.exists(D):A(f"[{G:02d}/{N(L)}] {d:<50} [SKIP]");p+=1
		else:
			A(f"[{G:02d}/{N(L)}] {d:<50} ",end=K,flush=C);r=f"https://drive.google.com/uc?id={T}";U=False
			try:
				A6=gdown.download(r,D,quiet=C,fuzzy=C)
				if A6 and B.path.exists(D):
					Q=B.path.getsize(D)
					if Q>1000:e=Q/1024/1024;A7=f"{e:5.1f}".replace(' ',K);A(f"[{A7} MB]");a+=1;U=C
			except:pass
			if not U:
				try:
					import requests as S;from html import unescape;f=f"https://drive.google.com/uc?export=download&id={T}";s=S.Session();H=s.get(f,stream=C)
					if'confirm='not in f and w in H.headers.get(x,K):
						import re;t=re.search('confirm=([0-9A-Za-z_-]+)',H.text)
						if t:A8=t.group(1);A9=f"{f}&confirm={A8}";H=s.get(A9,stream=C)
					if H.status_code==200 and w not in H.headers.get(x,K):
						with J(D,O)as F:
							for u in H.iter_content(chunk_size=8192):
								if u:F.write(u)
						if B.path.exists(D):
							Q=B.path.getsize(D)
							if Q>1000:e=Q/1024/1024;A(f"[{e:5.1f} MB]");a+=1;U=C
					else:
						v=D+'.html'
						with J(v,O)as F:F.write(H.content)
						A(f"[FAIL]");A(f"         Google Drive returned an HTML page (saved to {v})")
				except R as P:A(f"[FAIL]");A(f"         Exception: {P}")
				except:pass
			if not U:
				A(f"[FAIL]");A(f"         ERROR: Could not download from Google Drive");A(f"                File ID: {T}");A(f"                Check if file is publicly shared: {r}")
				if B.path.exists(D):B.remove(D)
				b+=1
	A();A('='*70);A(f"Summary: {a} downloaded | {p} skipped | {b} failed");A('='*70)
	if B.path.exists(E):B.remove(E)
	if I and B.path.exists(I):B.remove(I)
	A0(Z)
if __name__=='__main__':D();time.sleep(3);sys.exit(0)
